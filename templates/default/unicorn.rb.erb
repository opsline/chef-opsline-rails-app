app_root = "<%= @deploy_to %>/current"
shared_path = "<%= @deploy_to %>/shared"

Unicorn::HttpServer::START_CTX[0] = "#{app_root}/bin/unicorn"

app = "<%= @app_name %>"
user = "<%= @user %>"
env = (ENV["RAILS_ENV"] || "<%= @environment['RAILS_ENV'] %>" || "development")
preload_app true
timeout <%= @parameters['timeout'] %>

# Help ensure your application will always spawn in the symlinked
# "current" directory that Capistrano sets up.
working_directory app_root

stderr_path "#{shared_path}/log/unicorn.stderr.log"
stdout_path "#{shared_path}/log/unicorn.stdout.log"
worker_processes <%= @parameters['worker_processes'] %>
listen "#{shared_path}/sockets/#{app}.socket", :backlog => 1024
pid "#{shared_path}/pids/unicorn.#{app}.pid"

before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "#{app_root}/Gemfile"
end

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  # Before forking, kill the master process that belongs to the .oldbin PID.
  # This enables 0 downtime deploys.
  old_pid = "#{shared_path}/pids/unicorn.#{app}.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end

  # create a lock file
  f = File.open("#{server.config[:pid]}.lock", 'w')
  exit unless f.flock(File::LOCK_SH)
end

after_fork do |server, worker|
  # the following is *required* for Rails + "preload_app true",
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)
end
